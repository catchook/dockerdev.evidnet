ls#깃 환경 세팅 
git config user.name 이름
git config user.email 메일 

#깃 초기화 
깃 저장소를 만들 디렉토리 생성: mkdir 디렉토리명, cd 디렉토리명 
현재 디렉토리에서 지역 저장소 생성: git init

#버전 만들기 
깃 상태 확인: git status
수정한 파일 스테이징하기: git add 파일명.파일형식 (git add . , 이름 대신 마침표는 작업트리에서 수정한 파일을 한꺼번에 스테이지에 올림)
깃 상태 확인: git status,  changes to be committed로 바뀜
스테이지에 올라온 파일 커밋하기: git commit -m "수정 내용 "
깃 상태 확인: git status, noting to commit 버전으로 만들 파일이 없고 working tree clean 작업트리도 수정사항 업싱 깨끗함. 
저장소에 저장된 버전 확인: git log , 커밋을 만든 사람, 커밋 메세지 나타남
		          git log --stat :커밋에 관련된 파일까지 
**스테이징과 커밋 한꺼번에 처리하기: git commit -am "message"

#커밋 내용 확인 
커밋 기록 자세히 살펴보기: git log, 각 버전 작성자, 날짜 
		          커밋 해시옆에 HEAD -> master이면 가장 최신버전
변경 사항 확인하기: git diff 
커밋 메세지 수정하기: git commit --amend, i-> 입력 -> esc-> :wq 저장후 나옴


#버전 만드는 단계마다 파일 상태 알아보기
tracked 상태: 파일 이름 앞에  modified, changes not staged fo commit  등 파일 수정여부를 추적
untracked files: 한번도 깃에서 버전 관리를 하지 않음 

#작업 되돌리기 
작업트리에서 수정된 파일 되돌리기: git checkout -- 파일이름.파일형식
			        화면에는 아무것도 나타나지 않음.
  			       cat 파일이름.파일형식 명령 사용시 수정내용 확인. 
스테이징 되돌리기: git reset HEAD 파일이름.파일형식  (unstaged changes after reset)으로 변경됨. 
최신 커밋 되돌리기: git reset HEAD^ (HEAD^는 현재 HEAD가 가리키는 브랜치의 최신 커밋을 의미)
특정 커밋해시로 이동하고 이후 커밋은 취소: git reset 커밋해시A (최근 커밋을 A로 이동하겠다는 뜻), 커밋해시는 git log결과화면에서 copy
커밋 삭제하지 않고 되돌리기: git revert 되돌리고 싶은 커밋해시

#브랜치 만들기 
브랜치 만들기 git branch 브랜치이름
브랜치 확인 git branch (* master앞에 *는 아직 master 브랜치에서 작업 중이라는 뜻)
브랜치 사이 이동하기 git checkout 이동할 브랜치
브랜치 사이의 차이점 알아보기 git log 브랜치1..브랜치2
브랜치와 커밋의 관계를 좀더 쉽게 보기 git lon --oneline --branches --graph
master 브랜치와병합: 일단 git checkout master로 master브랜치로 옮겨감, git merge 병합할브랜치
		편집기 창이 열리지 않게 하려면 git merger 병합할 브랜치 --no--edit 
같은 문서의 다른 위치를 수정했을 때 merge하면 하나의 파일에 합쳐짐. 
같은 문서의 같은 위치를 수정시. 충돌함(줄 단위로 변경 여부 확인). 문서확인. 
병합이 끝난 브랜치 삭제하기: master브랜치에서 삭제해야함, git branch -d  (or -D) 삭제할 브랜치 이름
						병합하지 않은 브랜치 삭제시 오류메세지 발생, 이런경우 -D로 강제로 삭제

수정 중인 파일 감추기 및 되돌리기: git stash 
			      파일이 tracked 상태에서 가능.
	이전파일은 stash@{n}: 가장 최근은 n=0, 이전 것은 n += n, 파일이 stack쌓임. 
      	가장 최근 항목으로 되돌리기: git stash pop
            가장 최근 항목 삭제: git stash drop 
                                          
#local --원격 저장소 연결 
저장소 연결 : git remote add origin 복사한 주소 붙여넣기 : 복사한 주소를 origin이라는 닉넴으로 올리겠다. 
원격 저장소 연결 확인: git remote -v 
원격 저장소에 파일 올리기: git push -u origin master 
	지역저장소의 브랜치를 origin, 원격 저장소의 master 브랜치로 푸쉬
	-u 옵션은 지역 저장소의 브랜치를 원격 저장소 master 브랜치에 연결 (처음에 한번만 사용)
	이후 push 할때는 git push 라고만 입력 
원격 저장소에서 파일 내려받기--git pull origin master 


#ssh 원격 접속하기. - 자동 로그인 기능
홈디렉토리로 이동, ssh-keygen 입력 , 파일 이름 입력하지 않고 총 3번 enter 입력 
ssh 디렉토리 저장 확인, cd ~/.ssh 이동 , ls-la 로 프라이빗 (id_rsa 파일)과 퍼블릭 키(id_rsa.pub 파일) 생성
깃허브에 퍼블릭키 전송 : local의 프라이빗 키와 깃허브의 퍼블릭 키는 한쌍. 이게 서로 맞으면 컴터와 깃허브 저장소 연결
		cd ~/.ssh > 
		cat id_rsa.pub 안의 public key 복사 >
		깃허브 settings, ssh and gpg keys > add ssh key 추가 
git remote add <이름> 복사한 ssh 주소 

# 깃허브로 협업하기. 
원격 저장소 복제하기 --git clone <복사한 주소> <이동할 디렉토리>
원격 저장소 가져오기 -- git pull 